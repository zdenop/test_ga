# This is a basic workflow to help you get started with Actions

name: CI-test

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
#   workflow_dispatch:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  MYVAR:  d:/a/destination/

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo  "the var was detected to be test = " %MYVAR%

      # Runs a single command using the runners shell2
      - name: Run a one-line script
        run: echo  "the var was detected to be test = " $MYVAR
        

      # Runs a single command using the runners shell3
      - name: Run a one-line script
        run: echo  "the var was detected to be test = " ${MYVAR}
        
      # Runs a single command using the runners shell3
      - name: Run a one-line script
        run: echo  "the var was detected to be test = " ${{env.MYVAR}}
        
      - uses: bbonkr/get-version-action@v1.0.4
        id: get_version
        with:
          project: "./package.json"
      - name: logging
        run: |
          echo "Version=${{ steps.get_version.outputs.version }}"

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo  "steps.get_version.outputs.version = " ${{steps.get_version.outputs.version}}
          echo test, and deploy your project.
#          curl -sSL -o xz-5.3.2alpha.tar.gz https://tukaani.org/xz/xz-5.3.2alpha.tar.gz
#          tar -xvf xz-5.3.2alpha.tar.gz
      - name: Set env
        run: |
          echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV
          echo "GITHUB_VER=$(echo $(git describe --tags HEAD))" >> $GITHUB_ENV

      - name: Test
        run: |
          echo $GITHUB_SHA_SHORT
          echo $GITHUB_VER

      - name: Run a multi-line script
#        env:
#          GITVER: ${{git describe --tags HEAD}}
        shell: cmd
        run: |
          echo "Project ${{env.GITVER}}"
          echo "Project ${{env.GITVER}}" > version.txt
#          gitver="$($git describe --always --tags --abbrev=10 "${CI_COMMIT_SHA}")"
#          gitver="$(git describe --tags HEAD)"
