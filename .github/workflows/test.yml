# This is a basic workflow to help you get started with Actions

name: CI-test

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
#   workflow_dispatch:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  MYVAR:  d:/a/destination/

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - run: git fetch --prune --unshallow --tags

      - name: Get the version
        id: get_version_tess
        run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT
        
      - name: Get Version
        id: get_version
        uses: battila7/get-version-action@v2.2.1
       
      - uses: bbonkr/get-version-action@v1.0.4
        id: get_version_b
        with:
          project: "./package.json"
      - name: logging
        run: |
          echo "Version=${{ steps.get_version_b.outputs.version }}"

      - name: Run a multi-line script
        run: |
          echo "Add other actions to build,"
          echo  "steps.get_version.outputs.version = " ${{steps.get_version.outputs.version}}
          echo  "steps.get_version_b.outputs.version = " ${{steps.get_version_b.outputs.version}}
          echo "test, and deploy your project".

      - name: Set env
        run: |
          echo "GITHUB_VER=$(echo $(git describe --tags HEAD))" >> $GITHUB_ENV

      - name: Test
        run: |
          echo "GITHUB_SHA_SHORT" $GITHUB_SHA_SHORT
          echo "env.GITHUB_VER" $env.GITHUB_VER
          echo "GITHUB_VER:" $GITHUB_VER
          echo "env.GITVER: ${{env.GITVER}}"
          echo "steps.get_version_tess.outputs = " ${{steps.get_version_tess.outputs}}
          echo "steps.get_version_tess.outputs.VERSION = " ${{steps.get_version_tess.outputs.VERSION}}

      - name: Test Show Variables
        shell: cmd
        run: |
          echo "Project env ${{env.GITVER}}"
          echo "Project GITVER ${GITVER}"
          echo "Project ${{env.GITVER}}" > version.txt

      - name: Other tests
        run: |
          echo $(git describe --tags HEAD)
          $VER=$(git describe --tags HEAD)
          echo "set VER to ${VER}"
          ${env.VERA}=${VER}
          echo "VERSION_SHORT=${VER}" >> $GITHUB_ENV

      - name: tesseract-"$(git describe --tags HEAD)"-VS2019_win64
        run: |
          echo "set well done in ${env.VERSION_SHORT}"
          echo "set well I done in ${VERSION_SHORT}"
          echo "set well II done in ${{env.VERSION_SHORT}}"
          echo "set VERA done in ${{env.VERA}}"
          echo "set VERO done in ${{env.VERO}}"
          echo "set VERO done in ${{env.VERO}}"
          echo "get_version_tess" ${{needs.build.outputs.output1}}
          echo "VERSION is ${VERSION}"

