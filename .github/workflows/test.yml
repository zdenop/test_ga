# This is a basic workflow to help you get started with Actions

name: CI-test

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
#   workflow_dispatch:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  MYVAR:  d:/a/destination/

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest
    env:
      png_ver: 1643
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - run: git fetch --prune --unshallow --tags
             
      - name: Get archive name
        continue-on-error: true
        id: version
        run: |
          $git_info=$(git describe --tags HEAD)
          $stamp=$(date +'%Y-%m-%d_%H%M%S')
          echo "version=${git_info}"
          echo "version=${git_info}" >> $env:GITHUB_OUTPUT
          echo "stamp=${stamp}" >> $env:GITHUB_OUTPUT
        
      - name: get_version-test-${{ steps.version.outputs.version }}     
        run: |
          echo "we have version: ${{steps.version.outputs.version }}"
          echo "we have stamp: ${{steps.version.outputs.stamp}}"
          echo "Merge ${{steps.version.outputs.version}}-${{steps.version.outputs.stamp}}
       
      - name: find tesseract 
        run: |
          $cmd_info1=$(where tesseract)
          echo "Output1: ${cmd_info1}"          
          $cmd_info2=$(which tesseract)
          echo "Output2: ${cmd_info2}"          
      #    $cmd_info3=$(tesseract -v)
      #    echo "Output3: ${cmd_info3}"
          


