# This is a basic workflow to help you get started with Actions

name: CI-test

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
#   workflow_dispatch:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  MYVAR:  d:/a/destination/

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - run: git fetch --prune --unshallow --tags

      - name: Build and Install libpng
        shell: cmd
        run: |
             $png_ver=1643
             curl -sSL -o lpng${git_info}.zip https://download.sourceforge.net/libpng/lpng${git_info}.zip
             unzip.exe  -qq lpng${git_info}.zip
             cd lpng${git_info}
             cmake -Bbuild -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_PREFIX_PATH=${{env.ILOC}} -DCMAKE_INSTALL_PREFIX=${{env.ILOC}} -DPNG_TESTS=OFF -DPNG_SHARED=OFF
             cmake --build build --config RelWithDebInfo --target install
             
      - name: Get archive name
        id: version
        run: |
          $git_info=$(git describe --tags HEAD)
          echo "version=${git_info}"
          echo "version=${git_info}" >> $env:GITHUB_OUTPUT
        
      - name: get_version-test-${{ steps.version.outputs.version }}     
        run: |
          echo "we have version: ${{steps.version.outputs.version }}"
       
      - name: find teseract 
        run: |
          $cmd_info1=$(where tesseract)
          $cmd_info2=$(which tesseract)
          $cmd_info3=$(tesseract -v)
          echo "Output1: ${cmd_info1}"
          echo "Output2: ${cmd_info2}"
          echo "Output3: ${cmd_info3}"
          


